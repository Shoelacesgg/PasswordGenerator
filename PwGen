package Generator;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import java.awt.Font;
import javax.swing.JCheckBox;
import javax.swing.JTextPane;
import javax.swing.JSpinner;
import javax.swing.JButton;
import javax.swing.JSlider;

import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class PwGen extends JFrame implements ActionListener{
	JButton BankBtn;
	JButton GenerateBtn;
	JSpinner spinner;
	JCheckBox SymbolCheck;
	JCheckBox NumbersCheck;
	JCheckBox CapitalCheck;
	Storage store = new Storage();
	int numGenerate = 0;
	private JTextPane OptionsLabel;
	public PwGen() {
		setLookAndFeel();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//Creates the "Password Generator" Title
		
		getContentPane().setLayout(null);
		JLabel title = new JLabel("Password Generator");
		title.setFont(new Font("Tahoma", Font.PLAIN, 31));
		title.setVerticalAlignment(SwingConstants.TOP);
		title.setBounds(57, 11, 274, 38);
		getContentPane().add(title);
		
		//Creates the checkbooks that includes symbols
		
		SymbolCheck = new JCheckBox("Include Symbols in Passwords?:");
		SymbolCheck.setBounds(18, 107, 183, 23);
		SymbolCheck.setHorizontalTextPosition(SwingConstants.LEFT);
		getContentPane().add(SymbolCheck);
		
		//Creates the checkbox that includes capitals
		
		CapitalCheck = new JCheckBox("Include Capital Letters In Passwords?:");
		CapitalCheck.setBounds(18, 133, 215, 31);
		CapitalCheck.setHorizontalTextPosition(SwingConstants.LEFT);
		getContentPane().add(CapitalCheck);
		
		//Creates the checkbox that includes numbers
		
		NumbersCheck = new JCheckBox("Include Numbers in Passwords?:");
		NumbersCheck.setBounds(18, 167, 183, 23);
		NumbersCheck.setHorizontalTextPosition(SwingConstants.LEFT);
		getContentPane().add(NumbersCheck);
		
		//Decides the number of passwords to be generated
		JTextPane NumberCount = new JTextPane();
		
		NumberCount.setEditable(false);
		NumberCount.setText("Number of Generated Passwords?:");
		NumberCount.setBounds(18, 197, 183, 20);
		NumberCount.setOpaque(false);
		getContentPane().add(NumberCount);
		
		//Spinner for amount of pws to be generated
		
		spinner = new JSpinner();
		spinner.setBounds(193, 197, 29, 20);
		spinner.setValue(4);
		getContentPane().add(spinner);
		numGenerate = (int) spinner.getValue();
		
		//Button that generates the password
		
		GenerateBtn = new JButton("Generate Password");
		GenerateBtn.setFont(new Font("Tahoma", Font.PLAIN, 15));
		GenerateBtn.addActionListener(this);
		GenerateBtn.setBounds(10, 254, 364, 70);
		getContentPane().add(GenerateBtn);
		
		//Output header
		
		JTextPane OutputLabel = new JTextPane();
		OutputLabel.setFont(new Font("Tahoma", Font.PLAIN, 14));
		OutputLabel.setEditable(false);
		OutputLabel.setText("Output:");
		OutputLabel.setBounds(18, 228, 364, 70);
		OutputLabel.setOpaque(false);
		getContentPane().add(OutputLabel);
		
		//Text pane for output
		
		JTextPane OutputText = new JTextPane();
		OutputText.setEditable(false);
		OutputText.setText("edghdgsdg");
		OutputText.setBounds(10, 352, 364, 102);
		getContentPane().add(OutputText);
		
		//Button for the password bank
		
		BankBtn = new JButton("Password Bank");
		BankBtn.setBounds(243, 520, 131, 31);
		BankBtn.addActionListener(this);
		getContentPane().add(BankBtn);
		
		OptionsLabel = new JTextPane();
		OptionsLabel.setFont(new Font("Tahoma", Font.PLAIN, 14));
		OptionsLabel.setEditable(false);
		OptionsLabel.setText("Options:");
		OptionsLabel.setBounds(18, 80, 54, 20);
		OptionsLabel.setOpaque(false);
		getContentPane().add(OptionsLabel);

		pack();
		this.setSize(400,600);
		this.setVisible(true);
		
		
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new PwGen();
		//Storage store = new Storage();
		//store.setVisible(true);
		setLookAndFeel();
	}
	
	private static void setLookAndFeel() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| UnsupportedLookAndFeelException e) {
		}
	}
	
	//This grabs a random lower case letter for the password.
	
	public void randomLowerLetter() { 
		Random lower = new Random();
		char atoz = (char) (lower.nextInt('z' - 'a') + 'a');
		System.out.print(atoz);
	}
	
	//This grabs a random upper case letter for the password.
	
	public void randomUpperLetter() { 
		
		Random upper = new Random();
		char AtoZ = (char) (upper.nextInt('Z' - 'A') + 'A');
		if (CapitalCheck.isSelected()) {
			System.out.print(AtoZ);
		}
	}
	
	//This grabs a random symbol for the password.
	
	public void randomSymbol() {
		Random symRan = new Random();
		int sym = 0;
		sym = ThreadLocalRandom.current().nextInt(0, 7);
		if (SymbolCheck.isSelected()) {
			if (sym == 0) {
				System.out.print("!");
			} else if (sym == 1){
				System.out.print("@");
			} else if (sym == 2){
				System.out.print("#");
			} else if (sym == 3){
				System.out.print("$");
			} else if (sym == 4){
				System.out.print("%");
			} else if (sym == 5){
				System.out.print("^");
			} else if (sym == 6){
				System.out.print("&");
			} else if (sym == 7){
				System.out.print("*");
			} else {
				System.out.print("&");
			}
		} 
	}
	
	//This grabs a random number for the password.
	
	public void randomNumber() {
		Random number = new Random();
		int num = 0;
		num = ThreadLocalRandom.current().nextInt(0, 7);
		if (NumbersCheck.isSelected()) {
			System.out.print(num);
		}
		
	}
	
	//Creates the algorithms for individual passwords.
	
	public void passwordAlgorithm() {
		Random algorithmChoice = new Random();
		int choice = 0;
		choice = ThreadLocalRandom.current().nextInt(0, 9);
		if (choice == 0) {
			
		} else if (choice == 1) {
			
		} else if (choice == 2) {
		
		} else if (choice == 3) {
			
		} else if (choice == 4) {
			
		} else if (choice == 5) {
			
		} else if (choice == 6) {
			
		} else if (choice == 7) {
		
		} else if (choice == 8) {
		
		} else if (choice == 9) {
			
		} else {
			System.out.print("&");
		}
	}
	
	//Executes all the methods that factor into the password and puts them together
	
	public void generatePassword() {
		
		for (int i = 0; i< numGenerate; i++) {
			randomLowerLetter();
			randomUpperLetter();
			randomSymbol();
			randomNumber();
			System.out.println("");
		}
		
		//randomLowerLetter();
		//randomUpperLetter();
		//randomSymbol();
		//randomNumber();
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
	
		if (arg0.getActionCommand().equals("Generate Password"))	{
			System.out.println("Gen PW Clicked");
			numGenerate = (int) spinner.getValue();
			System.out.println(numGenerate);
			generatePassword();
		}
		
		if (arg0.getActionCommand().equals("Password Bank")) {
			System.out.println("Password Bank Clciked");
			store.setVisible(true);
		}
			
		
	
		
	}

}
